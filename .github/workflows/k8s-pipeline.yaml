name: pipeline

on:
  workflow_dispatch:
  # push:
  

env:
  ECR_REGISTRY: "606861014184.dkr.ecr.us-east-1.amazonaws.com"
  ECR_REPOSITORY: "sb-liberty"
  IMAGE_TAG: ${{ github.sha }}
  AWS_REGION: "us-east-1"
  # DOCKER_ENV_VARS: "-e DB_USER=${{ vars.DB_USER }} -e DB_PASS=${{ secrets.DB_PASS }}"


jobs:
  docker-build:
    runs-on: [self-hosted, Linux]
    outputs:
      image: ${{ steps.build_push_image.outputs.image }}
    steps:
      - name: Checkout_Code
        uses: actions/checkout@v3
      - name: Configure_AWS_Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ vars.ECR_AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.ECR_AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      - name: download_build_output
        uses: actions/download-artifact@v3
        with:
          name: java_archive              
      - name: Login_to_ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          mask-password: "true"
    
      - name: Build_and_push_image_to_ECR
        id: build_push_image
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          pwd
          ls -ltr 
          docker build -t $REGISTRY/${ECR_REPOSITORY}_liberty:$IMAGE_TAG --build-arg="WAR_FILE=liberty" --build-arg="WAR_PATH=web" --build-arg="JETTY_FILE=jetty-liberty-prod.xml" . && docker push $REGISTRY/${ECR_REPOSITORY}_liberty:$IMAGE_TAG
          docker build -t $REGISTRY/${ECR_REPOSITORY}_scheduler:$IMAGE_TAG --build-arg="WAR_FILE=scheduler" --build-arg="JETTY_FILE=jetty-liberty-prod.xml" . && docker push $REGISTRY/${ECR_REPOSITORY}_scheduler:$IMAGE_TAG
         
  deploy-app:
    runs-on: [self-hosted, Linux]
    needs: ["docker-build"]
    strategy:
      matrix:
        host: ${{ fromJson(vars.DEPLOY_HOSTS_LIBERTY) }}
    steps:
      - name: SSH into On-Premises Docker Host
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ matrix.host }}
          username: ${{ vars.SSH_USER}}
          password: ${{ secrets.SSH_PASS }}
          # allenvs: true
          envs: ECR_REGISTRY,ECR_REPOSITORY,IMAGE_TAG,ACCESS_KEY,SECRET_KEY,DOCKER_ENV_VARS,AWS_REGION,DOCKER_HOST_PORT
          debug: false
          script: |
            echo $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
            [ -d ~/.aws ] || mkdir -p ~/.aws
            echo "[default]" > ~/.aws/credentials
            echo "aws_access_key_id=$ACCESS_KEY" >> ~/.aws/credentials
            echo "aws_secret_access_key=$SECRET_KEY" >> ~/.aws/credentials
            echo "cat ~/.aws/credentials"
            echo "AWS Region $AWS_REGION"
        env:
          ACCESS_KEY: ${{ vars.ECR_AWS_ACCESS_KEY }}
          SECRET_KEY: ${{ secrets.ECR_AWS_SECRET_ACCESS_KEY }}
