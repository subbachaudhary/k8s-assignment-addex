name: pipeline for the reactjs and django app
on:
  workflow_dispatch:
  push:
    branches:
      - main 
env:
  ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
  REACT_ECR_REPOSITORY: "react-k8s"
  DJANGO_ECR_REPOSITORY: "django-k8s"
  IMAGE_REACT: ${{ secrets.ECR_REGISTRY }}/react-k8s
  IMAGE_DJANGO: ${{ secrets.ECR_REGISTRY }}/django-k8s
  IMAGE_TAGS: ${{ github.sha }}
  AWS_REGION: "eu-south-1"

jobs:
  paths-filter:
    runs-on: ubuntu-latest
    outputs:
      output1: ${{ steps.react_changes.outputs.src }}
      output2: ${{ steps.api_changes.outputs.src }}
    steps:
    - uses: actions/checkout@v3
    - uses: dorny/paths-filter@v2
      id: react_changes
      with:
        filters: |
          src:
            - './inquiring-frontend-react/frontend_react_inquiring/**'
    - uses: dorny/paths-filter@v2
      id: api_changes
      with:
        filters: |
          src:
            - './backend_drf_inquiring/**'
    - name: check react services changes
      id: react
      if: steps.react_changes.outputs.src == 'true'
      run: echo "Changes made in react src"

    - name: check api services changes
      id: api
      if: steps.api_changes.outputs.src == 'true'
      run: echo "Changes made in Django api src"

  docker-build:
    needs: ["paths-filter"]
    runs-on: ubuntu-latest
    outputs:
      IMAGE_TAG: ${{ steps.image-tag.outputs.IMAGE_TAGS }}    
    steps:
      - name: Checkout_Code
        uses: actions/checkout@v3
      - name: Configure_AWS_Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.ECR_AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.ECR_AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}           
      - name: Login_to_ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          mask-password: "true"
      
      - name: Calculate IMAGE_TAG
        id: image-tag
        run: |
          COMMIT_ID=$(echo ${GITHUB_SHA:0:7})
          BUILD_ID=$GITHUB_RUN_NUMBER
          IMAGE_TAG=$COMMIT_ID-$BUILD_ID
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV
          echo "IMAGE_TAGS=$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: React_Build_and_push_image_to_ECR
        id: react_build_push_image
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          pwd
          ls -ltr 
          if [[ ${{ needs.paths-filter.outputs.output1 }} == "true" ]] ; then
            echo "Building image of react ..."
            echo $REGISTRY/${REACT_ECR_REPOSITORY}:$IMAGE_TAG
            echo ${{ needs.paths-filter.outputs.output1 }}
            docker build -t $REGISTRY/${REACT_ECR_REPOSITORY}:v$IMAGE_TAG -f inquiring-frontend-react/frontend_react_inquiring/Dockerfile ./inquiring-frontend-react/frontend_react_inquiring 
            docker push $REGISTRY/${REACT_ECR_REPOSITORY}:v$IMAGE_TAG
          fi
         
      
      - name: API_Build_and_push_image_to_ECR
        id: api_build_push_image
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          pwd
          ls -ltr 
          if [[ ${{ needs.paths-filter.outputs.output2 }} == "true" ]] ; then
              echo "Building image of django api ..."
              echo $REGISTRY/${DJANGO_ECR_REPOSITORY}:$IMAGE_TAG
              echo ${{ needs.paths-filter.outputs.output2 }}
              docker build -t $REGISTRY/${DJANGO_ECR_REPOSITORY}:v$IMAGE_TAG -f backend_drf_inquiring/Dockerfile.prod ./backend_drf_inquiring
              docker push $REGISTRY/${DJANGO_ECR_REPOSITORY}:v$IMAGE_TAG
          fi
         
  deploy-app:
    needs:  ["paths-filter","docker-build"]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout_Code
        uses: actions/checkout@v3
      - name: Loging in the ECR Registry
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.ECR_AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.ECR_AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Authenticate with ECR
        run: |
          aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_REGISTRY
        
      - name: Loging in the EKS Cluster
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.EKS_AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.EKS_AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Set up kubeconfig
        run: |
          aws eks --region $AWS_REGION update-kubeconfig --name ${{ secrets.CLUSTER_NAME }}   

      - name: Update and apply React deployment yaml file
        run: |
           TAG=${{ needs.docker-build.outputs.IMAGE_TAG }}
           echo ${{ needs.docker-build.outputs.IMAGE_TAG }}
           if [[ ${{ needs.paths-filter.outputs.output1 }} == "true" ]] ; then
               echo "Previous image tag"
               cat ./k8s-django-react/react-manifeast/react-deployment.yaml | grep -i "${IMAGE_REACT}"
               sed -i.bak "s|${IMAGE_REACT}.*|${IMAGE_REACT}:v$TAG|g" ./k8s-django-react/react-manifeast/react-deployment.yaml
               cat ./k8s-django-react/react-manifeast/react-deployment.yaml | grep -i "${IMAGE_REACT}"
               echo "Updated image tag"
               kubectl apply -f ./k8s-django-react/react-manifeast/react-deployment.yaml

           fi
      - name: Update and apply Django API deployment yaml file 
        run: |
           TAG=${{ needs.docker-build.outputs.IMAGE_TAG }}
           echo ${{ needs.docker-build.outputs.IMAGE_TAG }}
           if [[ ${{ needs.paths-filter.outputs.output1 }} == "true" ]] ; then
              echo "Previous image tag"
              cat ./k8s-django-react/django-api-manifeast/django-deployment.yaml | grep -i "${IMAGE_DJANGO}"
              sed -i.bak "s|${IMAGE_DJANGO}.*|${IMAGE_DJANGO}:v$TAG|g" ./k8s-django-react/django-api-manifeast/django-deployment.yaml
              cat ./k8s-django-react/django-api-manifeast/django-deployment.yaml | grep -i "${IMAGE_DJANGO}"
              echo "Updated image tag"
              kubectl apply -f ./k8s-django-react/django-api-manifeast/django-deployment.yaml
           fi
          
      - name: Commit & Push changes
        uses: actions-js/push@master
        with:
          github_token: ${{ secrets.ACCESS_GITHUB_TOKEN }}
          author_email: 'actions@cloudyninjas.com'
          author_name: 'Github Actions'
          message: 'Updated image tag $TAG in react deployment yaml'