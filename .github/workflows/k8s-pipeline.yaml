name: pipeline for the reactjs and django app

on:
  workflow_dispatch:
  # push:
  

env:
  ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
  REACT_ECR_REPOSITORY: "react-k8s"
  DJANGO_ECR_REPOSITORY: "django-k8s"
  IMAGE_TAG: ${{ github.sha }}
  AWS_REGION: "eu-south-1"
  # DOCKER_ENV_VARS: "-e DB_USER=${{ vars.DB_USER }} -e DB_PASS=${{ secrets.DB_PASS }}"


jobs:
  docker-build:
    runs-on: ubuntu-latest
    outputs:
      image: ${{ steps.build_push_image.outputs.image }}
    steps:
      - name: Checkout_Code
        uses: actions/checkout@v3
      - name: Configure_AWS_Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.ECR_AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.ECR_AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}           
      - name: Login_to_ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          mask-password: "true"
    
      - name: Build_and_push_image_to_ECR
        id: build_push_image
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          pwd
          ls -ltr 
          echo $REGISTRY/${REACT_ECR_REPOSITORY}:$IMAGE_TAG
           docker build -t $REGISTRY/${REACT_ECR_REPOSITORY}:$IMAGE_TAG -f inquiring-frontend-react/frontend_react_inquiring/Dockerfile ./inquiring-frontend-react/frontend_react_inquiring && docker push $REGISTRY/${REACT_ECR_REPOSITORY}:$IMAGE_TAG
           docker build -t $REGISTRY/${DJANGO_ECR_REPOSITORY}:$IMAGE_TAG -f backend_drf_inquiring/Dockerfile.prod ./backend_drf_inquiring && docker push $REGISTRY/${DJANGO_ECR_REPOSITORY}:$IMAGE_TAG
          
  deploy-app:
    needs: docker-build
    runs-on: ubuntu-latest
    steps:
      
      - name: Loging in the ECR Registry
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.ECR_AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.ECR_AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Authenticate with ECR
        run: |
          aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin 239428837152.dkr.ecr.eu-south-1.amazonaws.com
        
      - name: Loging in the EKS Cluster
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.EKS_AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.EKS_AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Set up kubectl
        run: |
          aws eks --region $AWS_REGION update-kubeconfig --name ${{ secrets.CLUSTER_NAME }}   

      - name: Deploy to django app into EKS
        run: |
           kubectl get all 
          # kubectl apply -f django-deployment.yaml
          # kubectl apply -f postgres-statefull.yaml
      # - name: Deploy to react app into EKS
      #   run: |
      #     kubectl apply -f django-deployment.yaml
      #     kubectl apply -f postgres-statefull.yaml
